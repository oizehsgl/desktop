#!/usr/bin/env bash

#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#

script=$(readlink "${BASH_SOURCE[0]}")
echo "Push commits checking by ${script} ..." >&2
echo "Use environment variables:" >&2
echo "    PRIVATE_GIT_URL=${PRIVATE_GIT_URL}" >&2
echo "    PRIVATE_GIT_AUTHOR=${PRIVATE_GIT_AUTHOR}" >&2

remote="$1"
url="$2"

if [[ $url == *"$PRIVATE_GIT_URL"* ]]; then
  grep_option="-v"
else
  grep_option=""
fi

z40=0000000000000000000000000000000000000000
commits=()

while read local_ref local_sha remote_ref remote_sha; do
  if [ "$local_sha" = $z40 ]; then
    # Handle delete
    :
  else
    if [ "$remote_sha" = $z40 ]; then
      # New branch, examine all commits
      range="$local_sha"
    else
      # Update to existing branch, examine new commits
      range="$remote_sha..$local_sha"
    fi

    # Detect invalid private commits.
    commit=$(git rev-list -n 1 --format="format:Commit: %H    Author: %an <%ae>" "$range" | grep -E "^Commit: " | grep $grep_option "$PRIVATE_GIT_AUTHOR" | head -1 | awk '{print $2}')
    if [ -n "$commit" ]; then
        commits+=($commit)
    fi
  fi
done

count=${#commits[@]}

if [ $count -eq 0 ]; then
    echo "Push commits check by ${script} done" >&2
    exit 0
fi

echo "Push commits check by ${script} failed: found $count invalid commits" >&2
for commit in "${commits[@]}"; do
    git log -n 1 $commit >&2
done
exit 1
