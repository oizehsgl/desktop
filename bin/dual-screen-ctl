#!/bin/bash

NOTIFICATION_ID=315190199

if [ -z "$DISPLAY" ]; then
  export DISPLAY=$(~/bin/tty-ctl graphic-display)
fi

actives() {
  xrandr --listactivemonitors | grep -v -E '^Monitors:' | awk '{print $4}'
}

connecteds() {
  xrandr | grep ' connected' | awk '{print $1}'
}

offlines() {
  local -n _CONNECTEDS=$1
  local -n _ACTIVES=$2
  for ACTIVE in $_ACTIVES; do
    local OFFLINE=true
    for CONNECTED in $_CONNECTEDS; do
      if [[ $CONNECTED == $ACTIVE ]]; then
        OFFLINE=false
        break
      fi
    done
    if [ $OFFLINE = true ]; then
      echo $ACTIVE
    fi
  done
}

onlines() {
  local -n _CONNECTEDS=$1
  local -n _ACTIVES=$2
  for CONNECTED in $_CONNECTEDS; do
    for ACTIVE in $_ACTIVES; do
      if [[ $CONNECTED == $ACTIVE ]]; then
        echo $CONNECTED
      fi
    done
  done
}

list() {
  local CONNECTEDS=$(connecteds)
  local ACTIVES=$(actives)
  onlines CONNECTEDS ACTIVES
}

primary() {
  if [ -z "$1" ]; then
    local CONNECTEDS=$(connecteds)
  else
    local CONNECTEDS=("$@")
  fi
  for CONNECTED in $CONNECTEDS; do
    if [[ $CONNECTED == eDP* ]] || [[ $CONNECTED == VGA* ]]; then
      echo $CONNECTED
      break
    fi
  done
}

secondary() {
  if [ -z "$1" ]; then
    local CONNECTEDS=$(connecteds)
  else
    local CONNECTEDS=("$@")
  fi
  for CONNECTED in $CONNECTEDS; do
    if [[ $CONNECTED == HDMI* ]] || [[ $CONNECTED == DVI* ]]; then
      echo $CONNECTED
      break
    fi
  done
}

status() {
  # Execute "xrandr" command will cause X desktop with sense of frustration,
  # optimize by reading status file generate by monitor().
  cat /tmp/dual-screen.status
}

monitor() {
  local SCRIPT_PATH=$(readlink "${BASH_SOURCE[0]}")
  if [ -z "$SCRIPT_PATH" ]; then
    SCRIPT_PATH="${BASH_SOURCE[0]}"
  fi
  local SCRIPT_NAME=$(basename "${SCRIPT_PATH}")
  local LOCK_FILE="/tmp/${SCRIPT_NAME}.lock"

  if [ -z "$DUAL_SCREEN_MONITOR_LOCKED" ]; then
    touch "${LOCK_FILE}"
    export DUAL_SCREEN_MONITOR_LOCKED="${LOCK_FILE}"
    exec flock -x -n -o "${LOCK_FILE}" -c "${SCRIPT_PATH} monitor"
    exit $?
  fi

  local CONNECTEDS=$(connecteds)
  local ACTIVES=$(actives)
  local ONLINES=$(onlines CONNECTEDS ACTIVES)
  if [ "${#ONLINES[@]}" -gt 1 ]; then
    echo -n "on" >/tmp/dual-screen.status
  else
    echo -n "off" >/tmp/dual-screen.status
  fi

  srandrd -n ~/bin/dual-screen-ctl apply
}

apply() {
  local CONNECTEDS=$(connecteds)
  local ACTIVES=$(actives)
  local OFFLINES=$(offlines CONNECTEDS ACTIVES)
  local ONLINES=$(onlines CONNECTEDS ACTIVES)
  local PRIMARY=$(primary "${CONNECTEDS[@]}")
  local SECONDARY=$(secondary "${CONNECTEDS[@]}")

  if [ "${#ONLINES[@]}" -gt 1 ]; then
    echo -n "on" >/tmp/dual-screen.status
  else
    echo -n "off" >/tmp/dual-screen.status
  fi

  local COMMAND="xrandr --output ${PRIMARY} --auto"
  if [ -z "${SECONDARY}" ]; then
    local MESSAGE="Single Screen"
    local IMAGE="video-single-display-symbolic.symbolic"
  else
    COMMAND="${COMMAND} --output ${SECONDARY} --auto --same-as ${PRIMARY}"
    local MESSAGE="Dual Screen"
    local IMAGE="video-joined-displays-symbolic.symbolic"
  fi
  for OFFLINE in ${OFFLINES}; do
    COMMAND="${COMMAND} --output ${OFFLINE} --off"
  done
  echo $COMMAND >/dev/stderr
  dunstify -r ${NOTIFICATION_ID} -u low -t 3000 -i "${IMAGE}" "$MESSAGE" >/dev/stderr
  $COMMAND
  ~/bin/desktop-on-change dual-screen
}

case "${1}" in
  status)
    status
    ;;
  list)
    list
    ;;
  primary)
    primary
    ;;
  secondary)
    secondary
    ;;
  monitor)
    monitor
    ;;
  apply)
    apply
    ;;
  *)
    echo -e "usage: ${0} <status|list|primary|secondary|monitor|apply>\n" >/dev/stderr
    echo -e "\tstatus       Get status." >/dev/stderr
    echo -e "\tlist         List srceens." >/dev/stderr
    echo -e "\tprimary      Get primary srceen." >/dev/stderr
    echo -e "\tsecondary    Get secondary screen." >/dev/stderr
    echo -e "\tmonitor      Monitor screen plugged or unplugged." >/dev/stderr
    echo -e "\tapply        Apply screen settings." >/dev/stderr
    exit 1
    ;;
esac
